// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: v1/ml.proto

package mlService

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MlServiceClient is the client API for MlService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MlServiceClient interface {
	Digest(ctx context.Context, in *DigestRequest, opts ...grpc.CallOption) (*DigestResponse, error)
	Trend(ctx context.Context, in *TrendRequest, opts ...grpc.CallOption) (*TrendResponse, error)
}

type mlServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMlServiceClient(cc grpc.ClientConnInterface) MlServiceClient {
	return &mlServiceClient{cc}
}

func (c *mlServiceClient) Digest(ctx context.Context, in *DigestRequest, opts ...grpc.CallOption) (*DigestResponse, error) {
	out := new(DigestResponse)
	err := c.cc.Invoke(ctx, "/api.v1.MlService/Digest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mlServiceClient) Trend(ctx context.Context, in *TrendRequest, opts ...grpc.CallOption) (*TrendResponse, error) {
	out := new(TrendResponse)
	err := c.cc.Invoke(ctx, "/api.v1.MlService/Trend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MlServiceServer is the server API for MlService service.
// All implementations should embed UnimplementedMlServiceServer
// for forward compatibility
type MlServiceServer interface {
	Digest(context.Context, *DigestRequest) (*DigestResponse, error)
	Trend(context.Context, *TrendRequest) (*TrendResponse, error)
}

// UnimplementedMlServiceServer should be embedded to have forward compatible implementations.
type UnimplementedMlServiceServer struct {
}

func (UnimplementedMlServiceServer) Digest(context.Context, *DigestRequest) (*DigestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Digest not implemented")
}
func (UnimplementedMlServiceServer) Trend(context.Context, *TrendRequest) (*TrendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Trend not implemented")
}

// UnsafeMlServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MlServiceServer will
// result in compilation errors.
type UnsafeMlServiceServer interface {
	mustEmbedUnimplementedMlServiceServer()
}

func RegisterMlServiceServer(s grpc.ServiceRegistrar, srv MlServiceServer) {
	s.RegisterService(&MlService_ServiceDesc, srv)
}

func _MlService_Digest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DigestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MlServiceServer).Digest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.MlService/Digest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MlServiceServer).Digest(ctx, req.(*DigestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MlService_Trend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MlServiceServer).Trend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.MlService/Trend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MlServiceServer).Trend(ctx, req.(*TrendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MlService_ServiceDesc is the grpc.ServiceDesc for MlService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MlService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.MlService",
	HandlerType: (*MlServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Digest",
			Handler:    _MlService_Digest_Handler,
		},
		{
			MethodName: "Trend",
			Handler:    _MlService_Trend_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/ml.proto",
}
